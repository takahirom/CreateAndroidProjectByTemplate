import groovy.text.SimpleTemplateEngine
task generateProject << {
    def engine = new SimpleTemplateEngine()
    def templateDirName = 'template'
    def outputDirName = 'output'
    def canParseInputFiles = fileTree(templateDirName)
    def cantParseInputFiles = fileTree(templateDirName)

    fileTree(templateDirName).each{
        fileName->
        try{
            engine.createTemplate(fileName)
            // can parse
            cantParseInputFiles -= fileTree(fileName)
            println "include:" + fileName
        }catch (e){
            // cant parse
            canParseInputFiles -= fileTree(fileName)
            println "exclude:" + fileName
        }
    }

    // copy bin files etc..
    copy {
        from (templateDirName)
        into outputDirName
        
        exclude project.properties.templateJavaSourcePath
        canParseInputFiles.each{
            def tempRelativePath = file(templateDirName).toURI().relativize(it.toURI())
            exclude tempRelativePath.toString()
        }

    }
    // copy Manifest.xml ,strings.xml etc..
    copy {
        from (templateDirName)
        into outputDirName

        exclude project.properties.templateJavaSourcePath
        cantParseInputFiles.each{
            def tempRelativePath = file(templateDirName).toURI().relativize(it.toURI())
            exclude tempRelativePath.toString()
        }

        expand project.properties;
    }
    // Java source copy
    copy {
        from ('template/' + project.properties.templateJavaSourcePath)
        into outputDirName + '/' + project.properties.templateJavaSourcePath + "/" + project.properties.packageName.split('\\.').toList().join('/')

        expand project.properties;
    }
}